name: WAIT_FOR_STEP_OTHER_JOB_windows_ver1

on: [workflow_dispatch]

jobs:
  job1:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        id: checkout
        # uses: actions/checkout@v2
        run: echo "dummy checkout in job 1"
      - name: Set environment variable
        if: steps.checkout.outcome == 'success'
        id: set_var
        run: echo "MY_VAR=some_value" >> $env:GITHUB_ENV
      - name: Save environment variable to artifact
        if: steps.set_var.outcome == 'success'
        run: echo "MY_VAR=some_value_1" > my_var.txt
        
      - name: List directory contents before upload
        run: dir
      
      - name: Upload artifact
        if: steps.set_var.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: my_var
          path: my_var.txt
          
      - name: List uploaded artifacts
        run: ls -R

  job2:
    runs-on: windows-latest
    steps:
      # - name: wait for artifact 
      #   run: Start-Sleep -Seconds 5

      # - name: Checkout code
      #   # uses: actions/checkout@v2
      #   run: echo "dummy checkout in job2"
        
      # - name: List directory contents before download
      #   run: dir

      # - name: Download artifact
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: my_var
      #     path: .
      #     # name: my_var
      #     # path: my_var.txt
      #     debug: true
      #     retry: 3


      - name: Set up GitHub CLI
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token

      - name: Check if artifact is available
        id: check_artifact
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $attempts = 5
          $delay = 30
          for ($i = 0; $i -lt $attempts; $i++) {
            $artifacts = gh api -H "Accept: application/vnd.github.v3+json" /repos/${{ github.repository }}/actions/artifacts | ConvertFrom-Json
            if ($artifacts.artifacts | Where-Object { $_.name -eq "my_var" }) {
              Write-Output "Artifact found!"
              echo "::set-output name=artifact_found::true"
              exit 0
            } else {
              Write-Output "Artifact not found, waiting..."
              Start-Sleep -Seconds $delay
            }
          }
          Write-Output "Artifact not found after waiting, exiting."
          echo "::set-output name=artifact_found::false"
          exit 1

      - name: Download artifact
        id: artifact_downloaded
        if: steps.check_artifact.outputs.artifact_found == 'true'
        uses: actions/download-artifact@v4
        with:
          name: my_var
          path: .



      - name: List directory contents after download
        run: dir

      - name: Check if my_var.txt exists
        run: |
          if (!(Test-Path -Path "my_var.txt" -PathType Leaf)) {
            Write-Output "my_var.txt does not exist or is not a file."
            exit 1
          }


      - name: Wait for MY_VAR to be set
        run: |
          $timeout = 50  # Timeout in seconds (5 minutes)
          $start_time = Get-Date
          # while ((Get-Content my_var.txt) -ne "MY_VAR=some_value") {
          # while ((Get-ChildItem my_var.txt) -ne "MY_VAR=some_value") {
          while ((Get-Content my_var.txt).Trim() -ne "MY_VAR=some_value_1") {
            Write-Output "Waiting for MY_VAR to be set..."
            Start-Sleep -Seconds 5
            $current_time = Get-Date
            $elapsed_time = ($current_time - $start_time).TotalSeconds
            Write-Output "Elapsed time: $elapsed_time seconds"
            if ($elapsed_time -ge $timeout) {
              Write-Output "Timeout reached. Exiting..."
              exit 1
            }
          }
      - name: Use environment variable
        run: |
          $env:MY_VAR = (Get-Content my_var.txt).Split('=')[1]
          Write-Output "The value of MY_VAR is $env:MY_VAR"


      - name: Delete artifact
        if: steps.artifact_downloaded.outcome == 'success'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $artifacts = gh api -H "Accept: application/vnd.github.v3+json" /repos/${{ github.repository }}/actions/artifacts | ConvertFrom-Json
          $artifact = $artifacts.artifacts | Where-Object { $_.name -eq "my_var" }
          if ($artifact) 
          {
            gh api -X DELETE /repos/${{ github.repository }}/actions/artifacts/$($artifact.id)
            Write-Output "Artifact deleted."
          }
          else
          {
            Write-Output "Artifact not found."
          }
