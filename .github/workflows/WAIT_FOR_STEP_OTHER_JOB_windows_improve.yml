name: WAIT_FOR_STEP_OTHER_JOB_windows_improve

on: [workflow_dispatch]

jobs:
  job1:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        id: checkout
        # uses: actions/checkout@v2
        run: echo "dummy checkout in job 1"
      - name: Set environment variable
        if: steps.checkout.outcome == 'success'
        id: set_var
        run: echo "MY_VAR=some_value" >> $env:GITHUB_ENV
      - name: Save environment variable to artifact
        if: steps.set_var.outcome == 'success'
        run: echo "MY_VAR=some_value" > my_var.txt
        
      - name: List directory contents before upload
        run: dir
      
      - name: Upload artifact
        if: steps.set_var.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: my_var
          path: my_var.txt
      - name: List uploaded artifacts
        run: ls -R

  job2:
    runs-on: windows-latest
    # env:
    #   GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      # - name: wait for artifact 
      #   run: Start-Sleep -Seconds 5

      # - name: Checkout code
      #   # uses: actions/checkout@v2
      #   run: echo "dummy checkout in job2"
        
      # - name: List directory contents before download
      #   run: dir

      - name: Wait for MY_VAR to be set
        run: |
          $timeout = 80  # Timeout in seconds (5 minutes)
          $start_time = Get-Date
          while ($true) 
          {
            try 
            {
              # # Download artifact
              # Write-Output "Downloading artifact..."
              # # actions/download-artifact@v4 -name my_var -path . -debug true -retry 3
              # uses: actions/download-artifact@v4
              # with:
              #   name: my_var
              #   path: .
              #   # name: my_var
              #   # path: my_var.txt
              #   # debug: true
              #   # retry: 3
              
              # # Download artifact using PowerShell
              # Write-Output "Downloading artifact..."
              # $artifactDownload = Invoke-WebRequest -Uri "https://github.com/actions/download-artifact@v4" -OutFile "my_var.zip"
              # Expand-Archive -Path "my_var.zip" -DestinationPath "."

              # # Download artifact using GitHub CLI
              # Write-Output "Downloading artifact..."
              # gh run download --name my_var --dir .

              # # Download artifact using actions/download-artifact
              # Write-Output "Downloading artifact..."
              # $artifactDownload = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" -Headers @{Authorization = "Bearer ${{ secrets.GITHUB_TOKEN }}"} -Method Get

              # Download artifact using actions/download-artifact
              Write-Output "Downloading artifact..."
              $artifactDownload = Start-Process -FilePath "powershell.exe" -ArgumentList "-Command", "actions/download-artifact@v4 -name my_var -path . -debug true -retry 3" -Wait -PassThru

              
              Write-Output "Artifact downloaded."

              # List directory contents after download
              Write-Output "Listing directory contents after download..."
              dir

              # Check if my_var.txt exists
              if (!(Test-Path -Path "my_var.txt" -PathType Leaf))
              {
                Write-Output "my_var.txt does not exist or is not a file."
                exit 1
              }

              # Check if MY_VAR is set
              if ((Get-Content my_var.txt).Trim() -eq "MY_VAR=some_value")
              {
                Write-Output "MY_VAR is set."
                break
              }
            } 
            catch
            {
              Write-Output "An error occurred, but continuing..."
            }

            Write-Output "Waiting for MY_VAR to be set..."
            Start-Sleep -Seconds 5
            $current_time = Get-Date
            $elapsed_time = ($current_time - $start_time).TotalSeconds
            Write-Output "Elapsed time: $elapsed_time seconds"
            if ($elapsed_time -ge $timeout) 
            {
              Write-Output "Timeout reached. Exiting..."
              exit 1
            }
          }

      - name: Use environment variable
        run: |
          $env:MY_VAR = (Get-Content my_var.txt).Split('=')[1]
          Write-Output "The value of MY_VAR is $env:MY_VAR"
